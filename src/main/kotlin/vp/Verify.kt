package vp

import id.walt.credentials.utils.VCFormat
import id.walt.crypto.utils.JsonUtils.toJsonElement
import id.walt.did.dids.DidService
import id.walt.policies.Verifier
import id.walt.policies.models.PolicyRequest
import id.walt.policies.policies.AllowedIssuerPolicy
import id.walt.policies.policies.ExpirationDatePolicy
import id.walt.policies.policies.JwtSignaturePolicy
import id.walt.policies.policies.vp.HolderBindingPolicy

suspend fun main() {
    verifyVP()
}

suspend fun verifyVP() {
    DidService.minimalInit()

    val issuerDid = "did:key:z6Mksd8WWHnyHhS5zuS7ia9GRUcoAYAQ1M5n7M8wcZ9riqbh"
    val holderDid = "did:key:z6MkrAiu1qfPLa9suyYNZVNv4NQHFdt3VDQder8XYKnsXTJn"
    val verifierDid = "did:key:z6MkuNxBNHCy6sVmSDvomPhzVzNj1UqAb68YSLhYGs4svvDA"
    val signedVP = "eyJraWQiOiJkaWQ6a2V5Ono2TWtyQWl1MXFmUExhOXN1eVlOWlZOdjROUUhGZHQzVkRRZGVyOFhZS25zWFRKbiN6Nk1rckFpdTFxZlBMYTlzdXlZTlpWTnY0TlFIRmR0M1ZEUWRlcjhYWUtuc1hUSm4iLCJ0eXAiOiJKV1QiLCJhbGciOiJFZERTQSJ9.eyJzdWIiOiJkaWQ6a2V5Ono2TWtyQWl1MXFmUExhOXN1eVlOWlZOdjROUUhGZHQzVkRRZGVyOFhZS25zWFRKbiIsIm5iZiI6MTcyNzAzNzg0MCwiaWF0IjoxNzI3MDM3OTAwLCJqdGkiOiJ1cm46dXVpZDpjYzcyZmRkZC1hYjg0LTRlZjUtOWEzNC05N2JhZGMxNGMzNjYiLCJpc3MiOiJkaWQ6a2V5Ono2TWtyQWl1MXFmUExhOXN1eVlOWlZOdjROUUhGZHQzVkRRZGVyOFhZS25zWFRKbiIsIm5vbmNlIjoiMjAzOTQwMjkzNDAiLCJhdWQiOiJkaWQ6a2V5Ono2TWt1TnhCTkhDeTZzVm1TRHZvbVBoelZ6TmoxVXFBYjY4WVNMaFlHczRzdnZEQSIsInZwIjp7IkBjb250ZXh0IjpbImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL3YxIl0sInR5cGUiOlsiVmVyaWZpYWJsZVByZXNlbnRhdGlvbiJdLCJpZCI6InVybjp1dWlkOmNjNzJmZGRkLWFiODQtNGVmNS05YTM0LTk3YmFkYzE0YzM2NiIsImhvbGRlciI6ImRpZDprZXk6ejZNa3JBaXUxcWZQTGE5c3V5WU5aVk52NE5RSEZkdDNWRFFkZXI4WFlLbnNYVEpuIiwiY25mIjpudWxsLCJ2ZXJpZmlhYmxlQ3JlZGVudGlhbCI6WyJleUpyYVdRaU9pSlZYMlp0ZUZOVFoxRjBZMVZUVTNBNWVWQTBRa0ZDYVVjNU5rMXhkbVI2YWxCaWNEY3hMVzkxY2tKcklpd2lZV3huSWpvaVJXUkVVMEVpZlEuZXlKcGMzTWlPaUprYVdRNmEyVjVPbm8yVFd0elpEaFhWMGh1ZVVob1V6VjZkVk0zYVdFNVIxSlZZMjlCV1VGUk1VMDFiamROT0hkaldqbHlhWEZpYUNJc0luTjFZaUk2SW1ScFpEcHJaWGs2ZWpaTmEzSkJhWFV4Y1daUVRHRTVjM1Y1V1U1YVZrNTJORTVSU0Vaa2RETldSRkZrWlhJNFdGbExibk5ZVkVwdUlpd2lkbU1pT25zaVFHTnZiblJsZUhRaU9sc2lhSFIwY0hNNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TVRndlkzSmxaR1Z1ZEdsaGJITXZkakVpTENKb2RIUndjem92TDNCMWNtd3VhVzF6WjJ4dlltRnNMbTl5Wnk5emNHVmpMMjlpTDNZemNEQXZZMjl1ZEdWNGRDMHpMakF1TWk1cWMyOXVJbDBzSW5SNWNHVWlPbHNpVm1WeWFXWnBZV0pzWlVOeVpXUmxiblJwWVd3aUxDSlBjR1Z1UW1Ga1oyVkRjbVZrWlc1MGFXRnNJbDBzSW1OeVpXUmxiblJwWVd4VGRXSnFaV04wSWpwN0luUjVjR1VpT2xzaVFXTm9hV1YyWlcxbGJuUlRkV0pxWldOMElsMHNJbWxrSWpvaVpHbGtPbXRsZVRwNk5rMXJja0ZwZFRGeFpsQk1ZVGx6ZFhsWlRscFdUblkwVGxGSVJtUjBNMVpFVVdSbGNqaFlXVXR1YzFoVVNtNGlMQ0poWTJocFpYWmxiV1Z1ZENJNmV5SnBaQ0k2SW5WeWJqcDFkV2xrT21Gak1qVTBZbVExTFRobVlXUXROR0ppTVMwNVpESTVMV1ZtWkRrek9EVXpOamt5TmlJc0luUjVjR1VpT2xzaVFXTm9hV1YyWlcxbGJuUWlYU3dpYm1GdFpTSTZJa3BHUmlCNElIWmpMV1ZrZFNCUWJIVm5SbVZ6ZENBeklFbHVkR1Z5YjNCbGNtRmlhV3hwZEhraUxDSmtaWE5qY21sd2RHbHZiaUk2SWxSb2FYTWdkMkZzYkdWMElITjFjSEJ2Y25SeklIUm9aU0IxYzJVZ2IyWWdWek5ESUZabGNtbG1hV0ZpYkdVZ1EzSmxaR1Z1ZEdsaGJITWdZVzVrSUdoaGN5QmtaVzF2Ym5OMGNtRjBaV1FnYVc1MFpYSnZjR1Z5WVdKcGJHbDBlU0JrZFhKcGJtY2dkR2hsSUhCeVpYTmxiblJoZEdsdmJpQnlaWEYxWlhOMElIZHZjbXRtYkc5M0lHUjFjbWx1WnlCS1JrWWdlQ0JXUXkxRlJGVWdVR3gxWjBabGMzUWdNeTRpTENKamNtbDBaWEpwWVNJNmV5SjBlWEJsSWpvaVEzSnBkR1Z5YVdFaUxDSnVZWEp5WVhScGRtVWlPaUpYWVd4c1pYUWdjMjlzZFhScGIyNXpJSEJ5YjNacFpHVnljeUJsWVhKdVpXUWdkR2hwY3lCaVlXUm5aU0JpZVNCa1pXMXZibk4wY21GMGFXNW5JR2x1ZEdWeWIzQmxjbUZpYVd4cGRIa2daSFZ5YVc1bklIUm9aU0J3Y21WelpXNTBZWFJwYjI0Z2NtVnhkV1Z6ZENCM2IzSnJabXh2ZHk0Z1ZHaHBjeUJwYm1Oc2RXUmxjeUJ6ZFdOalpYTnpablZzYkhrZ2NtVmpaV2wyYVc1bklHRWdjSEpsYzJWdWRHRjBhVzl1SUhKbGNYVmxjM1FzSUdGc2JHOTNhVzVuSUhSb1pTQm9iMnhrWlhJZ2RHOGdjMlZzWldOMElHRjBJR3hsWVhOMElIUjNieUIwZVhCbGN5QnZaaUIyWlhKcFptbGhZbXhsSUdOeVpXUmxiblJwWVd4eklIUnZJR055WldGMFpTQmhJSFpsY21sbWFXRmliR1VnY0hKbGMyVnVkR0YwYVc5dUxDQnlaWFIxY201cGJtY2dkR2hsSUhCeVpYTmxiblJoZEdsdmJpQjBieUIwYUdVZ2NtVnhkV1Z6ZEc5eUxDQmhibVFnY0dGemMybHVaeUIyWlhKcFptbGpZWFJwYjI0Z2IyWWdkR2hsSUhCeVpYTmxiblJoZEdsdmJpQmhibVFnZEdobElHbHVZMngxWkdWa0lHTnlaV1JsYm5ScFlXeHpMaUo5TENKcGJXRm5aU0k2ZXlKcFpDSTZJbWgwZEhCek9pOHZkek5qTFdOalp5NW5hWFJvZFdJdWFXOHZkbU10WldRdmNHeDFaMlpsYzNRdE15MHlNREl6TDJsdFlXZGxjeTlLUmtZdFZrTXRSVVJWTFZCTVZVZEdSVk5VTXkxaVlXUm5aUzFwYldGblpTNXdibWNpTENKMGVYQmxJam9pU1cxaFoyVWlmWDE5TENKcFpDSTZJblZ5YmpwMWRXbGtPalF4TnpkbE1EUTRMVGxoTkdFdE5EYzBaUzA1WkdNMkxXRmxaRFJsTmpGaE5qUXpPU0lzSW1semMzVmxjaUk2SW1ScFpEcHJaWGs2ZWpaTmEzTmtPRmRYU0c1NVNHaFROWHAxVXpkcFlUbEhVbFZqYjBGWlFWRXhUVFZ1TjAwNGQyTmFPWEpwY1dKb0lpd2lhWE56ZFdGdVkyVkVZWFJsSWpvaU1qQXlOQzB3T1MweU1sUXlNRG8wTkRvMU9TNDVPVEU1TkRrd01qUmFJaXdpWlhod2FYSmhkR2x2YmtSaGRHVWlPaUl5TURJMExUQTVMVEkwVkRJd09qUTBPalU1TGprNU1qUTFNVE16TUZvaUxDSnVZVzFsSWpvaVNrWkdJSGdnZG1NdFpXUjFJRkJzZFdkR1pYTjBJRE1nU1c1MFpYSnZjR1Z5WVdKcGJHbDBlU0o5ZlEuTjZrM1h2ODBFZlh6aWx0SE9LM29QNC1SYWw1eExueWxxSkJ5MWlrUUlVRm9uTGJiYS1UcUc2eHJ2SUtoR0JmTlUxX2Vka0RHaWNIRjJVZi1xdWkzQnciXX19.W6ZA91pbO3cIVwYbbeMQiBh2DI0xKXgtnISiypMwOEa6Maym0jo85Fsy1ZdP8hCBC59srKC6e40z2_B59-6QAg"
    val vcFormat = VCFormat.jwt_vc_json
    println("Verify VP: $signedVP")

    // Policies that should be applied to Verifiable Presentation.
    val vpPolicies = listOf(
        PolicyRequest(HolderBindingPolicy())
        // other policies ...
    )

    // Global policies that are applied to ALL verifiable credentials in the Verifiable Presentation.
    val globalVcPolicies = listOf(
        PolicyRequest(JwtSignaturePolicy()),
        PolicyRequest(AllowedIssuerPolicy(), issuerDid.toJsonElement())
        // other policies ...
    )

    // Specify policies for specific credential types.
    val specificCredentialPolicies = mapOf(
        "OpenBadgeCredential" to listOf(PolicyRequest(ExpirationDatePolicy())),
        "allowed-issuer" to listOf(PolicyRequest(AllowedIssuerPolicy(), holderDid.toJsonElement())),
        // other policies ...
    )

    // Context is optional and it's an empty map by default.
    val presentationContext = mapOf<String, Any>()

    // Verify the presentation
    val resultJWT = Verifier.verifyPresentation(
        vcFormat,
        signedVP,
        vpPolicies,
        globalVcPolicies,
        specificCredentialPolicies,
        presentationContext
    )
    println("Overall Verification Result: ${resultJWT.overallSuccess()}")
}